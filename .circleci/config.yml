deps-run: &deps-install
  name: Install Python dependencies
  command: |
    python3 -m venv venv
    . venv/bin/activate
    pip install --user -r requirements/automated-documentation-tests.txt | cat
nei-run: &nei-install
  name: Install nei
  command: |
    pip install --user . | cat
latex-install: &latex-installer
  name: Install Latex dependencies
  command: |
    sudo apt update
    sudo apt install texlive texlive-xetex texlive-fonts-extra texlive-latex-extra texlive-plain-extra latexmk graphviz
html-run: &doc-html
  name: Build HTML documentation
  command: |
    sudo apt update
    sudo apt install graphviz
    make html
  working_directory: docs

latex-run: &doc-latex
  name: Build LaTeX documentation
  command: |
    make latexpdf
  working_directory: docs

echo-url: &url-echo
  name: "Built documentation is available at:"
  command: echo "${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}/docs/_build/html/index.html"

version: 2
jobs:
  test-latex:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: *deps-install
      - run: *latex-installer
      - run: *doc-latex
  test-html:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: *deps-install
      - run: *nei-install
      - run: *doc-html
      - store_artifacts:
          path: docs/_build/html
      - run: *url-echo

workflows:
  version: 2
  test-documentation:
    jobs:
      - test-latex
- test-html


# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
#version: 2
#jobs:
#  build:
#    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
#      - image: circleci/python:3.6.4

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

#    working_directory: ~/repo

#    steps:
#      - checkout

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
#          - v1-dependencies-

#      - run:
#          name: install dependencies
#          command: |
#            python3 -m venv venv
#            . venv/bin/activate
#            pip install -r requirements.txt

#      - save_cache:
#          paths:
#            - ./venv
#          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test#

#      - store_artifacts:
#          path: test-reports
#          destin